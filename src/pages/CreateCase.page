<apex:page id="CreateCase" Controller="CreateCaseController" showHeader="false" standardStylesheets="false" action="{!PageLoad}" applyHtmlTag="false" docType="html-5.0"  >
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />


<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>
<c:CFCU_Standard_Scripts_Component />
<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/jquery.min.js')}"></script>
<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/jquery.validate.js')}"></script>
<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/knockout-3.4.0.js')}"></script>

<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/knockout.mapping-latest.js')}"></script>

<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/moment.js')}"></script>

<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/bootstrap.min.js')}"></script>
<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/bootstrap-select.min.js')}"></script>
<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/ie10-viewport-bug-workaround.js')}"></script>

<script	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/forcesniffer.min.js')}"></script>

<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/bootstrap.min.css')}"/>
<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/bootstrap-select.min.css')}"/>
<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/simplebar.css')}"/>
<style>
@media print {
  a[href]:after {
    content: none !important;
  }
}
  .multiattachdiv{list-style:none;}
  .actbtn a {
    margin-right: 8px;
    margin-bottom: 10px;
}
</style>


<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
		<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
		<!--[if lt IE 9]>
			<script src="https://oss.maxcdn.com/libs/html5shiv/3.7.2/html5shiv.min.js"></script>
			<script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
		<![endif]-->
   
 
<script type="text/javascript"
		src="https://cdnjs.cloudflare.com/ajax/libs/jquery.blockUI/2.70/jquery.blockUI.min.js"></script> 

<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/' + stylesheet  )}"/> 
<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/FileUploadCSS.css')}"/>
<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/' + Responsivecss  )}"/>
<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/' + sidebar  )}"/> 
  <!-- <c:CSS_Responsive_Spectrum />   -->
 <apex:includeScript value="{!$Site.Prefix}/soap/ajax/36.0/connection.js" />
 
 
</head>


<body>
<apex:form id="CreateCaseForm" forceSSL="true">
	<div class="container">
		<div class="row">
				<div class="header">
					<div class="col-xs-12 col-sm-7">
						<div class="chevron_logo"><a href="{!$Site.Prefix}/ShowCases?Type=Messages"><apex:image url="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/img/' + imgName)}" styleClass="img-responsive imageposition" alt=""/></a></div>
					</div>
					<div class="col-xs-12 col-sm-5 text-right">
						<div class="top_action_btn">
							<ul class="topaction_btn_list">
								<li><a class="knowledgelink" target="_blank" href="{!Brand_Help}">Knowledge Base</a></li>
								<li>
								
								<a href="#" class="btn btn-primary action_close" id="btnClose" onclick="window.close();" >Close</a></li>
							</ul>
						</div>
					</div>
					<div class="clearfix"></div>
				</div>
			</div>
			<div class="row nameContainer"><b><span id="UserName">Welcome {!UserName}</span></b></div>
			<div class="row">
				<div class="content_area clearfix CreateCasePg">
				
						<div class="col-xs-12 col-md-4 col-lg-2">
						
							<div class="sidebar">
							
								<!--  <a data-bind="attr:{'href':'{!$Site.CurrentSiteUrl}CreateCase'}" class="btn btn-primary action_submit inqbtn">Create New Inquiry</a>-->
								<div class="sidebar_nav_list">
									<ul class="sb_navlist">
										<li><a href="{!$Site.Prefix}/ShowCases?Type=Messages">Messages</a></li>
										<li><a href="{!$Site.Prefix}/ShowCases?Type=SentMessages">Sent <i class="msgstxt">Messages</i></a></li>
										<li><a href="{!$Site.Prefix}/ShowCases?Type=DeletedMessages">Deleted <i class="msgstxt">Messages</i></a></li>
										<li><a href="{!$Site.Prefix}/ShowCases?Type=SavedMessages">Saved <i class="msgstxt">Messages</i></a></li>
									</ul>
								</div>
							</div>
						
					</div>
					<div class="col-xs-12 col-md-8 col-lg-10 ccrightpart">
						<div class="right_content">
							<h3 class="page_heading">Submit Inquiry</h3>
							<apex:actionfunction name="saveRecord" action="{!SaveCase}" rerender="outputpanel1" />
							<apex:outputPanel id="outputpanel1" layout="block">
							
								<div class="form-group">
								 <label for="department">Department:</label>
									<apex:inputHidden value="{!primaryCategory}" id="hiddencateory" />
									<select id="categories"  class="form-control selectpicker c_select_width" onchange ="document.getElementById('{!$Component.CreateCaseForm.hiddencateory}').value = this.value;">
    										<option  value=" " >Select Category</option>
    										<apex:repeat value="{!Category}" var="cat">
    											
	        									<option  value="{!cat.value}" >
	             								{!cat.label}
	        									</option>
   											 </apex:repeat>
									</select>
									 
										
								</div>
								<div class="form-group">
									<label for="subject">Subject:</label>
                     				<apex:inputText required="true" id="subject"  label="Subject" value="{!csubject}" StyleClass="form-control subjectinput " />
                     				<apex:inputText Styleclass="devicetype" id="txtdevicetype" value="{!DeviceType}" style="display:none;" />
								</div>
								<div class="form-group fglast">  
									<label for="description">Message:</label>
                     				 <apex:inputTextarea required="true" id="description"  cols="30" rows="10" label="Description" richtext="true" StyleClass="form-control descriptioninput" />
                     				 <apex:inputTextarea cols="30" rows="10" style="width:0px;border:0px solid red;height:0px;" id="commenttext" value="{!cdescription}" required="true" />
								</div>
							</apex:outputPanel>
							<div class="showDesktop">
							<label for="attachfile">*Each file not to exceed more than 10 MB. Files may take several minutes to upload/download depending on your Internet connection speed.</label>
							<apex:panelGrid columns="2" style="width:100%; table-layout: fixed;" id="panelgrid" >
										<div class="uploadBox">
										<div data-bind="foreach:FileUploadList" >
											<div class="fpwrap">
												<div class="inputfiles des2 twofiledes">
											        <input type="file" data-bind="value:name, attr: {'id': 'filesInput' + $index() }" name="upload" 
											        	accept="application/pdf,image/jpg,image/jpeg,image/png,image/bmp,image/gif"
											        	class="uploadfile UploadInputfiles" />
											        <label data-bind="value:name, attr: {'for': 'filesInput' + $index() }" class="lblfilename">Upload File</label>
											        <span class="spanfilename">Attach file</span>
											        <div class="clearfix"></div>
											    </div>
												<a type="button" title="Remove" class="btn clear removebutton" data-bind="click: $parent.remove">Remove File</a>
												<input data-bind="attr: {'id': 'uploadButton' + $index()}" type="button" title="Upload" class="btn uploadButton pull-right" value=" Upload " style="visibility: hidden; "/>
												<div class="clearfix"></div>
												<p class="fperror">
													<span class="text text-danger" data-bind="attr: {'id': 'erroricon' + $index() }"></span>
													<span  class="text text-danger" data-bind="attr: {'id': 'errorMessage' + $index() }"></span>
												</p>
											</div>
										</div>
									</div>
							</apex:panelGrid>
								<div class="form-group ">
									
        							<ul class="attached_files" >
        							<li class="adfile"><span class="glyphicon glyphicon-remove-circle"></span>&nbsp; &nbsp;<a class="add_files active_add addfile btn btn-link " id="btnAdd" data-bind="click: add">Add File</a></li>
						            	
						              
						  			 </ul>
								</div> 
								</div>
								<div class="form-group actbtn">
							<a class="btn btn-primary action_submit submitbutton" onclick="return submitform(false)">Submit</a>
							<a class="btn btn-primary action_submit submitbutton hideDesktop" onclick="return submitform(true)">Submit and Attach File(s)</a>
							<a class="btn btn-primary disabled_btn" onClick="Cancel();">Cancel</a>
							<apex:commandButton id="cmdSave" action="{!SaveCase}" value="Save" reRender="PageVariables" status="actStatusId" style="visibility: hidden;"/>
						    <apex:actionStatus id="actStatusId" onstop="callFileUpload()"  > </apex:actionStatus>
							</div> 
								
						</div>
					</div>	
				</div>
			</div>
					
                    
                   
                    
  <apex:outputPanel id="PageVariables" layout="block">
  <input type="hidden" class="parentid" value="{!caseid}" />
  </apex:outputPanel>             
  
  <input type="hidden"  class='addattachment' value="false" /> 
                  
  <!-- <apex:outputPanel id="PageVariables" layout="block">
  <input type="hidden" class="parentid" value="{!caseid}" />
   <apex:actionFunction name="passStringToController" action="{!SaveCase}" rerender="PageVariables">
   	<apex:param assignto="{!DeviceType}" name="DeviceType" value="{!}"></apex:param>
   </apex:actionFunction>
  </apex:outputPanel> -->
<div class="row">
				<div class="footer_area">
					<div class="col-xs-12" >
						<span style="float:left;">&copy;2017&nbsp;{!CopyRights}</span>
					</div>
				</div>
			</div>
</div>

<button type="button" class="btn btn-info btn-lg showConfirm" style="display:none;" data-toggle="modal" data-target="#confirm">App</button>
<button type="button" class="btn btn-info btn-lg showDialog" style="display:none;" data-toggle="modal" data-target="#myModal">App</button>
<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog" style="z-index:9999">
<div class="modal-dialog">

<!-- Modal content-->
<div class="modal-content">
<div class="modal-header">
<button type="button" class="close" data-dismiss="modal">&times;</button>
<h4 class="modal-title">Secure Email</h4>
</div>
<div class="modal-body dialog-body">
<p id="DialogText">Some text in the modal.</p>
</div>
<div class="modal-footer">
<button type="button" class="btn btn-default" data-dismiss="modal" id="OK">Close</button>
</div>
</div>

</div>
</div>


<div id="confirm" class="modal fade" role="dialog">
	<div class="modal-dialog">
			<!-- Modal content-->
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal">&times;</button>
						<h4 class="modal-title">Secure Email</h4>
					</div>
			<div class="modal-body">
				<p id="confirmText">Some text in the modal.</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">No</button>
				<button type="button" class="btn" id="delete">Yes</button>
			</div>
		</div>
	</div>
</div>


</apex:form>

  </body>  
 
<!--  <c:MultiAttachment objId="{!$CurrentPage.Parameters.id}"/>--> 
    
<script type="text/javascript"> 
j$ = jQuery.noConflict();
var imgName = '{!ImgName}';
var stylesheet = '{!Stylesheet}';
var sidebar = '{!Sidebar}';
var checkfilesize;
var __sfdcSessionId = '{!$Api.Session_ID}';
var blockedExtension = '{!Extension}';
var flagforupload = [];
var checkfileext;

var maxFiles =10; //to determine max number of files that can be uploaded

if (FileReader.prototype.readAsBinaryString === undefined)
	 {
	    FileReader.prototype.readAsBinaryString = function (fileData) 
	    {
	        var binary = "";
	        var pt = this;
	        var reader = new FileReader();
	        reader.onload = function (e)
	        {
				var data;
				if (!e) {
			       data = reader.content;
			    }
			    else {
			        data = e.target.result;
			    }
	            var bytes = new Uint8Array(data);
	            var length = bytes.byteLength;
	            for (var i = 0; i < length; i++) 
	            {
	                binary += String.fromCharCode(bytes[i]);
	            }
	            //pt.result  - readonly so assign content to another property
	            pt.content = binary;
	            j$(pt).trigger('onload');
      			}
    		 		 reader.readAsArrayBuffer(fileData);
 				 }
	}
	
	 function uploadFileIE(file, parentId, successCallBack, failureCallBack)
	{       
	        var reader = new FileReader();     
	
	        // Keep a reference to the File in the FileReader so it can be accessed in callbacks
	        reader.file = file; 
	
	        reader.onerror = function(e) 
	        {
	            switch(e.target.error.code) 
	            {
	                case e.target.error.NOT_FOUND_ERR:
	                    //alert('File Not Found!');
	                    showCustomAlert('File Not Found!');
	                    break;
	                case e.target.error.NOT_READABLE_ERR:
	                    //alert('File is not readable');
	                    showCustomAlert('File is not readable');
	                    break;
	                case e.target.error.ABORT_ERR:
	                    break; // noop
	                default:
	                    //alert('An error occurred reading this file.');
	                    showCustomAlert('An error occurred reading this file.');
	                    break;
	                    
	                if (failureCallBack)
	                {
	                	failureCallBack();
	                }
	            };
	        };     
	
	        reader.onabort = function(e) 
	        {
	            //alert('File read cancelled');
	            showCustomAlert('File read cancelled');
	        };
	
	        reader.onload = function(e) 
	        {
	            var att = new sforce.SObject("Attachment");
	            att.Name = this.file.name;
	            var n = att.Name.lastIndexOf('.');
				
			            att.ContentType = this.file.type;
			            att.ParentId = parentId;
			
			            att.Body = (new sforce.Base64Binary(reader.content)).toString();
			
			            sforce.connection.create([att],
			            {
			                onSuccess : function(result, source) 
			                {
			                    if (result[0].getBoolean("success")) 
			                    {
			                        console.log("new attachment created with id " + result[0].id);
			                        if (successCallBack)
			                        {
			                        	successCallBack(result[0].id);
			                        }
			                    } 
			                    else 
			                    {
			                        console.log("failed to create attachment " + result[0]);
			                        if (failureCallBack)
			                        {
			                        	failureCallBack();
			                        }
			                    }
			                }, 
			                onFailure : function(error, source) 
			                {
			                    console.log("An error has occurred " + error);
			                    if (failureCallBack)
			                    {
			                        	failureCallBack();
			                    }
			                }
			            });
			        };
			
	        reader.readAsBinaryString(file);
	    
	}

function uploadFileChromeFF(file, parentId, successCallBack, failureCallBack )
{       

        var reader = new FileReader();     
        // Keep a reference to the File in the FileReader so it can be accessed in callbacks
        reader.file = file; 

        reader.onerror = function(e) 
        {
            switch(e.target.error.code) 
            {
                case e.target.error.NOT_FOUND_ERR:
                    showCustomAlert('File Not Found!');
                    break;
                case e.target.error.NOT_READABLE_ERR:
                    showCustomAlert('File is not readable');
                    break;
                case e.target.error.ABORT_ERR:
                    break; // noop
                default:
                    showCustomAlert('An error occurred reading this file.');
                    break;
                    
               if (failureCallBack)
	           {
	           		failureCallBack();
	           }
            };
        };     

        reader.onabort = function(e) 
        {
            showCustomAlert('File read cancelled');
        };

        reader.onloadend = function(e) 
        {
            var att = new sforce.SObject("Attachment");
            att.Name = this.file.name;
            att.ContentType = this.file.type;
            att.ParentId = parentId;

			var binary = "";
			var bytes = new Uint8Array(e.target.result);
			var length = bytes.byteLength;
			for (var i = 0; i < length; i++) {
			    binary += String.fromCharCode(bytes[i]);
			}
            att.Body = (new sforce.Base64Binary(binary)).toString();

            sforce.connection.create([att],
            {
                onSuccess : function(result, source) 
                {
                    if (result[0].getBoolean("success")) 
                    {
                        console.log("new attachment created with id " + result[0].id);
                        if (successCallBack)
	                        {
	                        	successCallBack(result[0].id);
	                        }
                    } 
                    else 
                    {
                        console.log("failed to create attachment " + result[0]);
                        if (failureCallBack)
	                    {
	                        	failureCallBack();
	                    }
                    }
                }, 
                onFailure : function(error, source) 
                {
                    console.log("An error has occurred " + error);
                    if (failureCallBack)
	                    {
	                        	failureCallBack();
	                    }
                }
            });
        };
		reader.readAsArrayBuffer(file);
}
	
j$(document).ready(function()
    {       
    
    sforce.connection.sessionId = '{!$Api.Session_ID}'; 
		sforce.connection.serverUrl = '/customermessagingcenter' + sforce.connection.serverUrl;  
   		
   
    	j$("#uploadButton").click(function(){
			prepareFileUploads();
		});
		
		//Event listener to clear upload details/status bars once upload is complete
		j$("#clear").on('click',function(){
			j$(".upload").remove();
		});
        validate();  
        var model = new FileUploadViewModel();
        try
        {
        ko.applyBindings(model);
        }
        catch(e)
        {
        	alert(e);
        } 
       
        
       
    });
    function Cancel()
    {
    	var txt;
   		//var r = confirm("Are you sure you want to cancel this request?");
   		showCustomConfirm("Are you sure you want to cancel this request?");
    	
    	
    }
    
    function cancelRequest()
    {
       	j$('.subjectinput').val('');
   		j$('.descriptioninput').val('');
   		j$('.UploadInputfiles').val('');
   		j$('.selectpicker').val('');
   		window.location.href='{!$Site.Prefix}/ShowCases?Type=Messages';
    }
    
    function fileupload()
    {
    	 var self = this;
   		 self.name = ko.observable();
   		 
   
    }
    function FileUploadViewModel()
    {
    	var i = 3; 
    		var self = this;
		    self.FileUploadList = ko.observableArray([new fileupload(""),new fileupload(""),new fileupload("")]);
		   /* j$('.uploadBox').addClass('hidden');*/
		    self.remove = function () {
		  
		        self.FileUploadList.remove(this);
		        i = i-1;
		        if(self.FileUploadList().length == 0)
		        {
		          j$('.uploadBox').addClass('hidden');
		        }
		    };
		    self.add = function () {
		    	 	
			     	     
		      j$('.uploadBox').removeClass('hidden');
		     
		      	if(i >= maxFiles )
		      	{
		      		showCustomAlert('You can add ' + maxFiles + ' files at most per message.');
		      	}
		      	else
		      	{
		        	self.FileUploadList.push(new fileupload(""));
		        	 i = i + 1;
		        }
		        
		        if(j$(window).width() <= 1024 && j$(window).width() >= 768){
					        j$('.twofiledes').removeClass('des4').addClass('des2');
					        j$('.twofiledes').children('span.spanfilename').show();
					        j$('.twofiledes').children('label.lblfilename').show();
					        j$('.twofiledes').children('label.lblfilename').text('Browse');
					      }
					      else if(j$(window).width() < 768){
					        j$('.twofiledes').removeClass('des2').addClass('des4');
					        j$('.twofiledes').children('label.lblfilename').text('Upload File');
					        j$('.twofiledes').each(function() {
						        if(j$(this).children('.uploadfile').val() == ""){
						            j$(this).children('label.lblfilename').show();
						            j$(this).children('span.spanfilename').hide();
						        }
						        else {
						          j$(this).children('label.lblfilename').hide();
						          j$(this).children('span.spanfilename').show();
						        }
					        });
      					}
      					
      					
      					
      				
		    
		  };
    	
    }
    
    /*function getRTEValue()
    {
    				var iframe = j$('#cke_1_contents iframe')[0];
					var iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
					var h = iframeDocument.getElementById('CreateCase:CreateCaseForm:description_rta_body');
					return j$(h).text();
    }
    */
    function getRTEValue()
    {
        var iframe = j$('#cke_1_contents iframe')[0];
     var iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
     var h = iframeDocument.getElementById('CreateCase:CreateCaseForm:description_rta_body');
     var html =  j$(h).html();
	html = html.replace(/<br>/g, '\r\n');
	html = html.replace(/<li>/g, '\r\n');
	html = html.replace(/<\/li>/g, '');
	html = html.replace(/<ol>/g, '\r\n');
	html = html.replace(/<\/ol>/g, '');
	var d = j$('<div></div>');
	j$(d).html(html);
	return j$(d).text();
    }
    function setRTEValue(html)
    {
    				var iframe = j$('#cke_1_contents iframe')[0];
					var iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
					var h = iframeDocument.getElementById('CreateCase:CreateCaseForm:description_rta_body');
					j$(h).text(html);
    }
    
    function callFileUpload()
    {
    	prepareFileUploads();
    	
    }
    function detectDeviceType()
    {
    	var dtype ;
    	if(isMobile.phone)
           {
             dtype = 'Mobile';
             
                
              
           }
           
           //Check for all Tablet
           if(isMobile.tablet)
           {
              dtype = 'Tablet'; 
           }
           
           //Check if Desktop 
           if(!isMobile.any)
           {
              dtype = 'Desktop';
           }
           
           j$('[id$=txtdevicetype]').val(dtype);
    }
    
    
    function submitform(addattachment)
    {
       debugger; 	
    	casecomment = getRTEValue();
    	// replace zero with space characters
    	//casecomment = casecomment.replace(/<br>/g, '\r\n');
    	casecomment = casecomment.replace(/[\u200B-\u200D\uFEFF]/g, '');
    	var commenttovalidate = casecomment.replace(/\n/g, '');
    	
    	j$('[id$=commenttext]').val(commenttovalidate);
    	
        detectDeviceType();
      
    	if(j$('[id$=CreateCaseForm]').valid() && (commenttovalidate != '' && commenttovalidate != '<br>'))
    	{
    		checkFileSize();
    		
    		if(checkfilesize=='1' )
    		{
    			
    			j$('[id$=commenttext]').val(casecomment);
    			
    			 j$('.addattachment').val(addattachment);
    			
    			 j$('[id$=cmdSave]').click();
    			
    		}   		   		
    	}
    	else
    	{
    		j$('.error').addClass('text text-danger');
			
    	}
    	   	
    	
    }
    
	function validate()
    {
	     	
	   	 j$('[id$=CreateCaseForm]').validate();      
	    
		 j$('[id$=subject]').rules("add", {
	                    required: true,   });
	                    
	                    
	     j$('[id$=commenttext]').rules("add", {
	                    required: true, });
	     
	     j$('#categories').rules("add", {
	                    required: true, });
	}
	
	
	
	
	var byteChunkArray; 
	var files = [];
	var currentFile;
	var $upload;
	var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
	var VIEW_URL = '/servlet/servlet.FileDownload?file=';
	
	function checkFileSize()
	{
		var filesposition = [];
	
		parentId = j$('.parentid').val();
		
		var k = 0;
files = [];
		j$(".UploadInputfiles").each(function () {
			var f = document.getElementById(j$(this).attr('id')).files;
			if (f.length > 0) 
			{
				files.push(f[0])
				filesposition.push(k);
			};
			k++;
		    
		});
		
		//Disable inputs and buttons during the upload process
		j$(".uploadBox input").attr("disabled", "disabled");
		j$(".uploadBox button").attr({
			disabled: "disabled",
			class: "btnDisabled"
		});
	   //  j$(".selectpicker").attr("disabled", "disabled");
	     j$(".subjectinput").attr("disabled", "disabled");
	     j$(".descriptioninput").attr("disabled", "disabled"); 
	      j$(".removebutton").attr("disabled", "disabled"); 
	      j$(".addfile").attr("disabled", "disabled"); 
	      j$(".submitbutton").attr("disabled", "disabled"); 
		//Build out the upload divs for each file selected
		var uploadMarkup = '';
		if(files.length == 0)
		{
			checkfilesize='1';
		}
		else
		{
			checkfilesize='0';
		}
		if(files.length >0 )
		{
			var ext ;	
			
			
		var bextns = blockedExtension.split(',');
		
			for(var i =0 ; i< files.length; i++)
			{
				var j = 0;				
				var n = files[i].name.lastIndexOf('.');
				ext = files[i].name.substring(n + 1);
				flagforupload[i] = false;
				for(var k=0; k< bextns.length; k++)
				{
					console.log('bextns[k].trim().toLocaleUpperCase()' + bextns[k].trim().toLocaleUpperCase());
					console.log('ext.toLocaleUpperCase()' +ext.toLocaleUpperCase());
				   if(bextns[k].trim().toLocaleUpperCase() ==  ext.toLocaleUpperCase())
	    			{
	    				
	    				flagforupload[i]= true;
	    				j$('#errorMessage'+ filesposition[i]).text('');
	    				j$('#erroricon'+ filesposition[i]).removeClass('glyphicon');
	    				j$('#erroricon'+ filesposition[i]).removeClass('glyphicon-exclamation-sign');
	    				break;
	    			}
	    			
	    		}
	    		
	    		if(flagforupload[i]== false)
	    		{
	   				j$('#errorMessage'+ filesposition[i]).text('File type is not allowed.');
					j$('#erroricon'+ filesposition[i]).addClass('glyphicon glyphicon-exclamation-sign');
	   				j++;
					
				}
	    		/*if(j > 0 )
	    		{
	    			files.length =0;
	    		}*/
			}
			
			
			if(j$.inArray(false, flagforupload) !== -1)
			{
				
				//alert('You cannot upload file with extension:' + blockedExtension );
				
	    		j$(".uploadBox input").removeAttr("disabled");
				j$(".uploadBox button").removeAttr("disabled").attr("class","btn");
				 j$(".removebutton").removeAttr("disabled"); 
				j$(".submitbutton").removeAttr("disabled"); 
				return;
				
			}
			
				for (i = 0; i < files.length; i++)
				 {
						//Determine file display size
						if(files[i].size < 10485760)
						{
							checkfilesize='1';
							var displaySize = Math.floor(files[i].size/1024) + 'KB';
						}
						else if(files[i].size > 10485760)
						{
							//alert('File size is greater than 2 MB');
							j$(".uploadBox input").removeAttr("disabled");
							j$(".uploadBox button").removeAttr("disabled").attr("class","btn");
							
						//	j$(".selectpicker").removeAttr("disabled");
				   			j$(".subjectinput").removeAttr("disabled");
				     		j$(".descriptioninput").removeAttr("disabled");
				     		 j$(".removebutton").removeAttr("disabled"); 
				     		j$(".addfile").removeAttr("disabled");
				     		 j$(".submitbutton").removeAttr("disabled"); 
				     		 
							//j$('.UploadInputfiles').val('');
							//j$('#filesInput'+ i).val('');
							j$('#errorMessage'+ filesposition[i]).text('File size is greater than 10 MB');
							j$('#erroricon'+ filesposition[i]).addClass('glyphicon glyphicon-exclamation-sign');
							files[i].size = 0;
							checkfilesize='0';
							files.length =0;
							uploadMarkup='';
							break;
				
							}
						else
						{
							checkfilesize='1';
							var displaySize  = Math.round((files[i].size / 1048576)*10)/10 + 'MB';
						}
				
						 uploadMarkup += '<div class="upload" data-status="pending" style="display:none" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
							uploadMarkup += '<div class="fileName"><span class="name">'+ files[i].name + '</span> - '+ displaySize+ '</div>';
							uploadMarkup += '<div class="percentComplete">0%</div>'
							uploadMarkup += '<div class="clear"/>';
							uploadMarkup += '<div class="statusBar">';
							uploadMarkup += '<div class="statusBarPercent"/>';
							uploadMarkup += '</div>';
							uploadMarkup += '</div>';
			
		}
		j$('.uploadBox').append(uploadMarkup);

		}
		
		
		
	}
	
	//var parentId, you will see this variable used below but it is set in the component as this is a dynamic value passed in by component attribute
	
	//Executes when start Upload button is selected
	function prepareFileUploads(){
	
		parentId = j$('.parentid').val();
		checkForUploads();
		
	}
	function blockUi (message)
	{
			j$.blockUI({ css: { 
	            border: 'none', 
	            padding: '15px', 
	            backgroundColor: '#000', 
	            '-webkit-border-radius': '10px', 
	            '-moz-border-radius': '10px', 
	            opacity: .5, 
	            color: '#fff' 
	        	},
	        	 message: '<h1>' + message + '</h1>' 
	        	
	        	}); 
	}
	function checkForUploads(){
		//Get div of the first matching upload element that is 'pending', if none, all uploads are complete
		$upload = j$(".upload[data-status='pending']").first();
		
		
	      		//if(false)
	            	if($upload.length != 0)
								{
									//Based on index of the div, get correct file from files array
									currentFile = files[$upload.attr('data-index')];
									
									if ((navigator.userAgent.indexOf("MSIE") != -1) ||(!!document.documentMode == true ))
									{
										blockUi('Uploading ' + currentFile.name);
						 
						       
										uploadFileIE(currentFile, parentId, function success(attachmentId)
										{
											$upload.attr('data-status','complete');
									
											//Change name of file to link of uploaded attachment
											$upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');
											j$.unblockUI();
											//Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process. 
											checkForUploads();
										}, function failure()
										{
											$upload.attr('data-status','complete');
											$upload.addClass('uploadError');
											$upload.find(".statusPercent").addClass('statusPercentError');
											$upload.attr('title',event.message);
											j$.unblockUI();
										});
									}
									else
									{
										blockUi('Uploading ' + currentFile.name);
										uploadFileChromeFF(currentFile, parentId, function success(attachmentId)
										{
											$upload.attr('data-status','complete');
											//Change name of file to link of uploaded attachment
											$upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');
											j$.unblockUI();
											//Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process. 
											checkForUploads();
										}, function failure()
										{
											$upload.attr('data-status','complete');
											$upload.addClass('uploadError');
											$upload.find(".statusPercent").addClass('statusPercentError');
											$upload.attr('title',event.message);
											j$.unblockUI();
										});
									}	
								}
								else
								{
									if(j$('.addattachment').val().toLowerCase() == 'true')
									{
										window.location.href='{!$Site.Prefix}/AddAttachment?Type=Messages&parentType=case&parentId=' + parentId;
									}
									else
									{
										window.location.href='{!$Site.Prefix}/ShowCases?Type=Messages';
									}
									
									//All uploads completed, enable the input and buttons
									j$(".uploadBox input").removeAttr("disabled");
									j$(".uploadBox button").removeAttr("disabled").attr("class","btn");
									
									//
									
									
									/*Remove the browse input element and replace it, this essentially removes
									the selected files and helps prevent duplicate uploads*/
									//j$("#filesInput").replaceWith('<input type="file" name="file" multiple="true" id="filesInput">');
								}
	}
	</script>
    
  

    <script>
    j$ = jQuery.noConflict();
    // File Attachment Design JQUERY Start

    j$(document).on('change', '.inputfiles .uploadfile', function(){
      var fileval = j$(this).val().split('\\').pop();
        j$(this).siblings('span.spanfilename').html(fileval);
      if(j$(this).parent().hasClass('des4') && j$(fileval) != ""){
        j$(this).siblings('span.spanfilename').show();
        j$(this).siblings('label.lblfilename').hide();
      }
      else if(j$(this).parent().hasClass('des4')){
        j$(this).siblings('span.spanfilename').hide();
        j$(this).siblings('label.lblfilename').show();
      }
      
    });
    
   j$(document).ready(function(){   
    j$(window).on('resize', function(){ 
      if(j$(window).width() > 1024){
      	j$('.twofiledes').children('span.spanfilename').hide();
        j$('.twofiledes').children('label.lblfilename').hide();
      }
      else if(j$(window).width() <= 1024 && j$(window).width() >= 768){
        j$('.twofiledes').removeClass('des4').addClass('des2');
        j$('.twofiledes').children('span.spanfilename').show();
        j$('.twofiledes').children('label.lblfilename').show();
        j$('.twofiledes').children('label.lblfilename').text('Browse');
      }
      else if(j$(window).width() < 768){
        j$('.twofiledes').removeClass('des2').addClass('des4');
        j$('.twofiledes').children('label.lblfilename').text('Upload File');
        j$('.twofiledes').each(function() {
	        if(j$(this).children('.uploadfile').val() == ""){
	            j$(this).children('label.lblfilename').show();
	            j$(this).children('span.spanfilename').hide();
	        }
	        else {
	          j$(this).children('label.lblfilename').hide();
	          j$(this).children('span.spanfilename').show();
	        }
        });
      }
    }).resize();
  });
  // File Attachment Design JQUERY End
</script>
<script>

	function showCustomAlert(msg)
	{
		var isBlocked=false;
		if (j$(".blockUI").is(":visible"))
		{
			j$.unblockUI();
			isBlocked=true;
		}
		
		j$("#DialogText").html(msg);
		//j$(".showDialog").click();
		
		j$('#myModal').modal({
			backdrop:'static',
			keyboard:false
			}).one('click','.btn',function(e)
			{
				if (isBlocked)
				{
					j$.blockUI();
				}
			});
	}
	
	function showCustomConfirm(msg) 
	{
		j$("#confirmText").html(msg);
		//j$(".showConfirm").click();

		j$('#confirm').modal({
		      backdrop: 'static',
		      keyboard: false
		    })
		    .one('click', '#delete', function(e) {
	        	cancelRequest();
    		
		});
	}
	
	j$(document).ready(function() 
	{
		 detectDeviceType();
		 if (j$('[id$=txtdevicetype]').val() == 'Desktop')
		 {
		 	maxFiles = 10;
		 	j$('.showDesktop').show();
		 	j$('.hideDesktop').hide();
		 }
		 else
		 {
		 	maxFiles = 10;
		 	j$('.showDesktop').hide();
		 	j$('.hideDesktop').show();
		 }
	});

</script>

</html>
</apex:page>