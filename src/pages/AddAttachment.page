<apex:page id="AddAttachemnt" Controller="AddAttachemntController"
	showHeader="false" standardStylesheets="false" action="{!PageLoad}"
	applyHtmlTag="false" docType="html-5.0">

	<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />

<meta name="viewport"
	content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0" />
<c:CFCU_Standard_Scripts_Component />
<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/jquery.min.js')}"></script>
<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/jquery.validate.js')}"></script>
<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/knockout-3.4.0.js')}"></script>
<!-- <apex:includeScript value="{!$Resource.checkmobileJs}"/>  -->


<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/knockout.mapping-latest.js')}"></script>

<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/moment.js')}"></script>

<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/bootstrap.min.js')}"></script>
<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/bootstrap-select.min.js')}"></script>
<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/ie10-viewport-bug-workaround.js')}"></script>

<script
	src="{!URLFOR($Resource.MessagingAssets ,'MessagingAssets/js/forcesniffer.min.js')}"></script>

<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/bootstrap.min.css')}" />
<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/bootstrap-select.min.css')}" />
<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/simplebar.css')}" />
<style>
.actbtn a {
	margin-right: 5px;
	margin-bottom: 10px;
}

@media print {
	a[href]:after {
		content: none !important;
	}
}

@media ( max-width : 1024px) {
	.MDParea {
		padding: 0 24px !important;
	}
	multiattachdiv {
		list-style: none;
	}
}
</style>


<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
            <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.2/html5shiv.min.js"></script>
            <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->

<script type="text/javascript"
	src="https://cdnjs.cloudflare.com/ajax/libs/jquery.blockUI/2.70/jquery.blockUI.min.js"></script>

<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/' + stylesheet  )}" />
<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/FileUploadCSS.css')}" />
<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/' + Responsivecss  )}" />
<link rel="stylesheet" type="text/css"
	href="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/css/' + sidebar  )}" />
<!-- <c:CSS_Responsive_Spectrum />   -->
<apex:includeScript value="{!$Site.Prefix}/soap/ajax/36.0/connection.js" />
<style>
.custom-file-input {
	color: transparent;
}

.custom-file-input::-webkit-file-upload-button {
	visibility: hidden;
}

.custom-file-input::before {
	content: 'Select File';
	display: inline-block;
	color: #fff;
	background-color: #337ab7;
	border-color: #2e6da4;
	padding: 6px 12px;
	border-radius: 3px;
	outline: none;
	white-space: nowrap;
	-webkit-user-select: none;
	cursor: pointer;
	font-size: 13px;
	width: 88px;
	font-weight: bold;
}

.custom-file-input:hover::before {
	border-color: black;
}

.custom-file-input:active::before {
	background: -webkit-linear-gradient(top, #e3e3e3, #f9f9f9);
}
</style>

</head>



<body>

	<apex:form id="CreateCaseForm" forceSSL="true">
		<div class="container" id="container">
			<div class="row">
				<div class="header">
					<div class="col-xs-12 col-sm-7">
						<div class="chevron_logo">
							<a href="{!$Site.Prefix}/ShowCases?Type=Messages"> <apex:image url="{!URLFOR($Resource.MessagingAssets,'MessagingAssets/img/' + imgName)}"
									styleClass="img-responsive" alt="" />
							</a>
						</div>
					</div>
					<div class="col-xs-12 col-sm-5 text-right"
						style="padding-right: 10px">
						<div class="top_action_btn">
							<ul class="topaction_btn_list">
								<li><a class="knowledgelink" target="_blank"
									href="{!Brand_Help}">Knowledge Base</a></li>
								<li style="padding-right: 0px;"><a href="#"
									class="btn btn-primary action_close" onclick="window.close();">Close</a>
								</li>
							</ul>
						</div>
					</div>
					<div class="clearfix"></div>
				</div>
			</div>
			<div class="row">
				<div class="content_area clearfix">
					<div class="col-xs-12 col-md-12 MDParea">
						<div class="message_content">
							<div class="row nameContainer">
								<div id="UserName">
									<b>Welcome {!UserName}</b>
								</div>
							</div>
						</div>


					</div>
				</div>
			</div>
			<div class="row" id="content_area_id">
				<div class="col-xs-12 col-md-8 col-lg-10 MDParea">
					<div class="right_content">
						<h3 class="page_heading">{!title}</h3>


						<div class="form-group">

							<input type='hidden' value='{!parentId}' id="parentId" /> <label
								for="attachfile"> *Each file not to exceed more than 10
								MB. Files may take several minutes to upload/download depending
								on your Internet connection speed. Supported file types are pdf,
								jpg, bmp, gif and png. </label> <span id="spanError"
								style="display: none; margin-bottom: 10px;"
								class="text-danger text "> <span
								class="glyphicon glyphicon-exclamation-sign"></span> File size
								can not exceed 10 MB.
							</span> <span id="spanErrorType"
								style="display: none; margin-bottom: 10px;"
								class="text-danger text"> <span
								class="glyphicon glyphicon-exclamation-sign"></span> File type
								is not allowed.
							</span>

							<div id="tblUploadFile">
								<input type="file" id="fuFileUpload"
									accept="image/*, application/pdf"
									class="uploadfile UploadInputfiles custom-file-input nonIphone"
									name="fileUpload" style="margin-bottom: 10px; display: none;" />
								<a class="btn btn-primary action_submit submitbutton"
									id="noniphonebutton" style="margin-bottom: 10px;"
									onclick="j$('#fuFileUpload').click(); return false;" href='#'>Select
									File</a> <input type="file" id="fuFileUploadiphone"
									class="uploadfile UploadInputfiles custom-file-input Iphone"
									name="fileUpload" style="margin-bottom: 10px; display: none;" />

								<a class="btn btn-primary action_submit submitbutton"
									id="iphonebutton" style="margin-bottom: 10px;"
									onclick="j$('#fuFileUploadiphone').click(); return false;"
									href='#'>Select File</a>
							</div>
							<div id="tblUploadFileUploadFiles">
								<span id="spanErrorType"
									style="margin-bottom: 10px; margin-bottom: 10px;"
									class="text-danger text"> <span
									class="glyphicon glyphicon-exclamation-sign"></span> You have
									already reached maximum number of files allowed per
									case/inquiry. <br />
								<br /></span>

							</div>

							<apex:actionFunction action="{!RefreshAll}" name="RefreshAll"
								rerender="tblAttachment,tblAttachmentUploadSection"
								oncomplete="j$.unblockUI();showHide();"></apex:actionFunction>
							<apex:actionFunction action="{!RemoveFile}" name="RemoveFile"
								rerender="tblAttachment,tblAttachmentUploadSection"
								oncomplete="j$.unblockUI();showHide();">
								<apex:param name="id" value="" />

							</apex:actionFunction>

							<apex:outPutPanel id="tblAttachment">
								<ul
									class="attachments comment_detailed_attachment multiattachdiv"
									style="padding-left: 0px; list-style: none;">
									<apex:repeat value="{!attachmentlist}" var="attachment">


										<li class="attachmentCount"><span style="width: 60%;">
												<a id="download2" href="{!attachment.downloadurl}"
												class="{!(attachment.fileicon)}_icon">
													{!attachment.filename} </a>&nbsp;(<span>{!attachment.filesize}</span>)
										</span> <a type="button" title="Remove"
											class="btn clear removebutton"
											onclick="blockUi('Removing file:   {!attachment.filename}');  RemoveFile('{!attachment.downloadurl}'); return false;"
											style="float: right;">Remove File</a></li>
									</apex:repeat>
								</ul>
							</apex:outPutPanel>


							<div class="form-group actbtn">
								<apex:outPutPanel rendered="{!if(entityType == 'case' , false , true)}">
									<a class="btn btn-primary action_submit submitbutton"
										href='DisplayCaseAndCaseComment?id={!caseid}&Type={!parentType}&SB={!SB}&SD={!SD}'>Done</a>
								</apex:outPutPanel>
								<apex:outPutPanel rendered="{!if(entityType == 'case' ,true, false)}">
									<a class="btn btn-primary action_submit submitbutton"
										href='ShowCases?Type=Messages'>Done</a>
								</apex:outPutPanel>
							</div>

						</div>



					</div>
				</div>
			</div>

			<div id="imgImageContentDiv" class="top_nav" style="display: none;">
				<div class="row">
					<div class="col-xs-1"></div>
					<div class="col-xs-10">
						<br />
						<br /> <a style="font-weight: bold;" class="back_to_inbox"
							onclick="j$('#content_area_id').show(); j$('#imgImageContentDiv').hide(); ">Back</a>
						<br />
						<br /> <img class="img-responsive" id="imgImageContent" src="" />

						<iframe class="embed-responsive-item" id="ifrmOtherContent" src=""></iframe>

					</div>

				</div>

			</div>

		</div>

	</apex:form>






</body>
<script>
        var __sfdcSessionId = '{!$Api.Session_ID}';
        var blockedExtension = '{!Extension}'
        j$ = jQuery.noConflict();
        j$(document).ready(function () {

            sforce.connection.sessionId = '{!$Api.Session_ID}';
            sforce.connection.serverUrl = '/customermessagingcenter' + sforce.connection.serverUrl;
			showHide();

        });
        
        function showHide()
        {
        	if(j$(".attachmentCount").length == 10)
        	{
        		j$('#tblUploadFile').hide();
        		j$('#tblUploadFileUploadFiles').show();
        		
        	}	
        	else
        	{
        		j$('#tblUploadFile').show();
        		j$('#tblUploadFileUploadFiles').hide();


        	}
        	if (isMobile.apple.device){
				j$("#fuFileUpload").hide();	
				j$("#noniphonebutton").hide();	
			}
			else{
				j$("#fuFileUploadiphone").hide();
				j$("#iphonebutton").hide();		

			}
        }
        
        function blockUi(message) {
            j$.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: '<h1>' + message + '</h1>'

            });
        }
        j$(document).ready(function () {
            j$('#fuFileUpload').change(function () {
            
                uploadFile();
            });
            j$('#fuFileUploadiphone').change(function () {
				
                uploadFile();
            });

        });
        function uploadFile() {
			
            j$("#spanError").hide();
            j$("#spanErrorType").hide();
            
            if (document.getElementById('fuFileUpload').files.length == 0 && (!isMobile.apple.device)) {
                alert("Please select file to upload");
                return;
            }
            if (document.getElementById('fuFileUploadiphone').files.length == 0 && isMobile.apple.device) {
                alert("Please select file to upload");
                return;
            }
			
            
            var parentId = document.getElementById('parentId').value;
            var currentFile;
            if(!isMobile.apple.device){
            	currentFile = document.getElementById('fuFileUpload').files[0];
           	}
           	if(isMobile.apple.device){
           		currentFile = document.getElementById('fuFileUploadiphone').files[0];
           	}
            
            var n = currentFile.name.lastIndexOf('.');
            ext = currentFile.name.substring(n + 1);
            var bextns = blockedExtension.split(',');
            var fileAllowed = false;
            
            for(var k=0; k< bextns.length; k++)
            {
                  if(bextns[k].trim().toLocaleUpperCase() ==  ext.toLocaleUpperCase())
                  {
                    fileAllowed = true;
                    break;
                  }
            }
            if(fileAllowed == false)
            {
                j$("#spanErrorType").show();
                return;
            }
            
            if (currentFile.size > 10485760) {
                j$("#spanError").show();
                return;
            }
            j$("#spanError").hide();
            if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) {
                blockUi('Uploading ' + currentFile.name);
                uploadFileIE(currentFile, parentId, function success(attachmentId) {
                    /*$upload.attr('data-status','complete');

                    //Change name of file to link of uploaded attachment
                    $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');

                    //Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process.
                    checkForUploads();*/
                    j$.unblockUI();
                    RefreshAll();
                }, function failure() {

                    /*$upload.addClass('uploadError');
                    $upload.find(".statusPercent").addClass('statusPercentError');
                    $upload.attr('title',event.message);*/
                    j$.unblockUI();
                });
            }
            else {
                blockUi('Uploading ' + currentFile.name);
                uploadFileChromeFF(currentFile, parentId, function success(attachmentId) {
                    /*$upload.attr('data-status','complete');
                    //Change name of file to link of uploaded attachment
                    $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');

                    //Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process.
                    checkForUploads();*/
                    j$.unblockUI();
                    RefreshAll();
                }, function failure() {
                    /*$upload.attr('data-status','complete');
                    $upload.addClass('uploadError');
                    $upload.find(".statusPercent").addClass('statusPercentError');
                    $upload.attr('title',event.message);*/
                    j$.unblockUI();

                });
            }
        }

        function uploadFileChromeFF(file, parentId, successCallBack, failureCallBack) {

            var reader = new FileReader();
            // Keep a reference to the File in the FileReader so it can be accessed in callbacks
            reader.file = file;

            reader.onerror = function (e) {
                switch (e.target.error.code) {
                    case e.target.error.NOT_FOUND_ERR:
                        showCustomAlert('File Not Found!');
                        break;
                    case e.target.error.NOT_READABLE_ERR:
                        showCustomAlert('File is not readable');
                        break;
                    case e.target.error.ABORT_ERR:
                        break; // noop
                    default:
                        showCustomAlert('An error occurred reading this file.');
                        break;

                        if (failureCallBack) {
                            failureCallBack();
                        }
                };
            };

            reader.onabort = function (e) {
                showCustomAlert('File read cancelled');
            };

            reader.onloadend = function (e) {
                var att = new sforce.SObject("Attachment");
                att.Name = this.file.name;
                att.ContentType = this.file.type;
                att.ParentId = parentId;

                var binary = "";
                var bytes = new Uint8Array(e.target.result);
                var length = bytes.byteLength;
                for (var i = 0; i < length; i++) {
                    binary += String.fromCharCode(bytes[i]);
                }
                att.Body = (new sforce.Base64Binary(binary)).toString();

                sforce.connection.create([att],
                {
                    onSuccess: function (result, source) {
                        if (result[0].getBoolean("success")) {
                            console.log("new attachment created with id " + result[0].id);
                            if (successCallBack) {
                                successCallBack(result[0].id);
                            }
                        }
                        else {
                            console.log("failed to create attachment " + result[0]);
                            if (failureCallBack) {
                                failureCallBack();
                            }
                        }
                    },
                    onFailure: function (error, source) {
                        console.log("An error has occurred " + error);
                        if (failureCallBack) {
                            failureCallBack();
                        }
                    }
                });
            };
            reader.readAsArrayBuffer(file);
        }

        function uploadFileIE(file, parentId, successCallBack, failureCallBack) {
            var reader = new FileReader();

            // Keep a reference to the File in the FileReader so it can be accessed in callbacks
            reader.file = file;

            reader.onerror = function (e) {
                switch (e.target.error.code) {
                    case e.target.error.NOT_FOUND_ERR:
                        //alert('File Not Found!');
                        showCustomAlert('File Not Found!');
                        break;
                    case e.target.error.NOT_READABLE_ERR:
                        //alert('File is not readable');
                        showCustomAlert('File is not readable');
                        break;
                    case e.target.error.ABORT_ERR:
                        break; // noop
                    default:
                        //alert('An error occurred reading this file.');
                        showCustomAlert('An error occurred reading this file.');
                        break;

                        if (failureCallBack) {
                            failureCallBack();
                        }
                };
            };

            reader.onabort = function (e) {
                //alert('File read cancelled');
                showCustomAlert('File read cancelled');
            };

            reader.onload = function (e) {
                var att = new sforce.SObject("Attachment");
                att.Name = this.file.name;
                var n = att.Name.lastIndexOf('.');

                att.ContentType = this.file.type;
                att.ParentId = parentId;

                att.Body = (new sforce.Base64Binary(reader.content)).toString();

                sforce.connection.create([att],
                {
                    onSuccess: function (result, source) {
                        if (result[0].getBoolean("success")) {
                            console.log("new attachment created with id " + result[0].id);
                            if (successCallBack) {
                                successCallBack(result[0].id);
                            }
                        }
                        else {
                            console.log("failed to create attachment " + result[0]);
                            if (failureCallBack) {
                                failureCallBack();
                            }
                        }
                    },
                    onFailure: function (error, source) {
                        console.log("An error has occurred " + error);
                        if (failureCallBack) {
                            failureCallBack();
                        }
                    }
                });
            };

            reader.readAsBinaryString(file);

        }

        function downloadFile(url, fileName) {
        var siteUrl = '{!$Site.CurrentSiteUrl}';
        	 var url = j$(this)[0].downloadurl();
		            var fileName = j$(this)[0].filename(); 
		            fileName =  fileName.split('.').pop().toLowerCase();
		        		if(detectDeviceType() == 'Desktop')
		            	{
		            		
		            		window.open(siteUrl + url);
		            		
		            	}
		            	else
		            	{
			            	if(fileName == 'png' || fileName == 'jpg' || fileName == 'jpeg' || fileName == 'bmp' || fileName == 'tiff')
			            	{
			            			window.location.href = siteUrl + url;
			            		
		            		}
		            		else
		            		{
		            				window.location.href  = siteUrl + url + '&pdf=1';
		            		}
		            		
		            	}
		            	return false;
        
        
            /*
            fileName = fileName.split('.').pop().toLowerCase();
            if (fileName == 'png' || fileName == 'jpg' || fileName == 'jpeg' || fileName == 'bmp' || fileName == 'tiff') {
                j$("#imgImageContent").attr('src', siteUrl + url);
                j$("#imgImageContentDiv").show();
                j$("#content_area_id").hide();
                j$("#imgImageContent").show();
                j$("#ifrmOtherContent").hide();

            }
            else {


                if (detectDeviceType() == 'Desktop' ) {
                    window.open(siteUrl + url);
                }
                
                else {
                    j$("#ifrmOtherContent").attr('src', siteUrl + url);
                    j$("#imgImageContentDiv").hide();
                    j$("#imgImageContent").hide();
                    j$("#ifrmOtherContent").show();
                    j$("#content_area_id").hide();
                    
                }


            }*/
        }
        
        function detectDeviceType()
        {
            var dtype ;
            if(isMobile.phone)
               {
                 dtype = 'Mobile';
               }
               
               //Check for all Tablet
               if(isMobile.tablet)
               {
                  dtype = 'Tablet'; 
               }
               
               //Check if Desktop 
               if(!isMobile.any)
               {
                  dtype = 'Desktop';
               }
               
               return dtype;
        }
        var blockedExtension = '{!Extension}';

    </script>
	</html>

</apex:page>